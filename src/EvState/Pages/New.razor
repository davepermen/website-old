@page "/new"
@implements IDisposable
@inject EvState.HttpClients.ECarUpHttpClient eCarUpHttpClient

<h1>Start / Stop charging</h1>
@if (charging == false)
{
    <button @onclick="Start" disabled="@(clicking ? "disabled" : null)">Start</button>
}
else
{
    <button @onclick="Stop" disabled="@(clicking ? "disabled" : null)">Stop</button>
}

<h2>Connected Clients</h2>
@clients.Count

@functions {
    public void Dispose()
    {
        clients.Remove(this);
        var _ = NotifyClients();
    }
}

@code {
    static bool clicking = false;
    static bool charging = false;
    static List<New> clients = new List<New>();

    protected override async Task OnInitializedAsync()
    {
        if (clients.Contains(this) == false)
        {
            clients.Add(this);
        }
        charging = (await eCarUpHttpClient.State()).Length > 0;
        await base.OnInitializedAsync();
        await NotifyClients();
    }

    async Task NotifyClients()
    {
        foreach (var client in clients)
        {
            await client.InvokeAsync(() => client.StateHasChanged());
        }
    }

    async Task Start()
    {
        clicking = true;
        await NotifyClients();
        await eCarUpHttpClient.StartCharging(TimeSpan.FromHours(1));
        charging = (await eCarUpHttpClient.State()).Length > 0;
        clicking = false;
        await NotifyClients();
    }

    async Task Stop()
    {
        clicking = true;
        await NotifyClients();
        await eCarUpHttpClient.StopCharging();
        charging = (await eCarUpHttpClient.State()).Length > 0;
        clicking = false;
        await NotifyClients();
    }
}