@page "/"
@implements IDisposable
@inject EvState.HttpClients.ECarUpHttpClient eCarUpHttpClient
@inject EvState.ScheduledTasks.EvState evState

<button @onclick="Toggle" disabled="@(clicking ? "disabled" : null)">@(charging == false ? "start" : "stop")</button>
<p>@clients.Count connected @(clients.Count <= 1 ? "client" : "clients")</p>
<p>@evState.Name is at @evState.BatteryLevel%</p>

@functions {
    public void Dispose()
    {
        clients.Remove(this);
        var _ = NotifyClients();
    }
}

@code {
    static bool clicking = false;
    static bool charging = false;
    static List<Index> clients = new List<Index>();

    protected override async Task OnInitializedAsync()
    {
        evState.OnChanged += NotifyClients;

        if (clients.Contains(this) == false)
        {
            clients.Add(this);
        }
        charging = (await eCarUpHttpClient.State()).Length > 0;
        await base.OnInitializedAsync();
        await NotifyClients();
    }

    async Task NotifyClients()
    {
        await Task.WhenAll(clients.Select(async client => await client.InvokeAsync(() => client.StateHasChanged())));
    }

    async Task Toggle()
    {
        clicking = true;
        await NotifyClients();
        if (charging == false)
        {
            await eCarUpHttpClient.StartCharging(TimeSpan.FromHours(4));
        }
        else
        {
            await eCarUpHttpClient.StopCharging();
        }
        charging = (await eCarUpHttpClient.State()).Length > 0;
        clicking = false;
        await NotifyClients();
    }
}