@page "/"
@implements IDisposable
@inject EvState.HttpClients.ECarUpHttpClient eCarUpHttpClient
@inject EvState.ScheduledTasks.EvState evState
@inject EvState.ScheduledTasks.PollEvState pollEvState

@if (showUserForm == false)
{
    <AuthorizeView>
        <Authorized>
            <section horizontal>
                <button @onclick="ToggleCharging" disabled="@(clickingCharging ? "disabled" : null)">
                    <svg viewBox="0 0 24 24">
                        <rect stroke="hsla(30, 100%, 60%, 0.5)" stroke-width="4" fill="transparent" width="100%" height="100%" />
                        <rect x="3.5" y="3.5" width="17" height="17" fill="hsla(30, 100%, 60%, 0.25)" />
                        <svg x="2" y="2" width="20" height="20" viewBox="0 0 21.4 21.4">
                            <defs>
                                <filter id="shadow">
                                    <feDropShadow dx="@(charging ? "0.25" : "0")" dy="@(charging ? "0.5" : "0")" stdDeviation="@(charging ? "1.5" : "0")" />
                                </filter>
                            </defs>
                            <polygon fill="white"
                                     style="filter:url(#shadow);"
                                     opacity="@(charging ? 1 : 0.3)"
                                     points="18.375,0 4.834,10.492 9.459,12.05 3.025,21.4 15.983,10.859 11.916,9.19" />
                        </svg>
                    </svg>
                </button>
                <button @onclick="ToggleClimateControl" id="fan" disabled="@(clickingClimateControl ? "disabled" : null)" state="@(climateControl ? "active" : null)">
                    <svg viewBox="0 0 24 24">
                        <rect stroke="hsla(30, 100%, 60%, 0.5)" stroke-width="4" fill="transparent" width="100%" height="100%" />
                        <rect x="3.5" y="3.5" width="17" height="17" fill="hsla(30, 100%, 60%, 0.25)" />
                        <g class="fan">
                            <svg x="0" y="0" width="24" height="24" viewBox="-5 -5.5 60 60">
                                <defs>
                                    <filter id="shadow">
                                        <feDropShadow dx="@(climateControl ? "0.25" : "0")" dy="@(climateControl ? "0.5" : "0")" stdDeviation="@(climateControl ? "1.5" : "0")" />
                                    </filter>
                                </defs>
                                <path fill="white"
                                      style="filter:url(#shadow);"
                                      opacity="@(climateControl ? 1 : 0.3)"
                                      d="M451.52,316.08a10.25,10.25,0,0,1-4-4.94c-.29-1.21-1.44-2.92-3.29-2-2.43,1.22-7.88,7-5.22,14.41,2.33,6.52,13.44,8.49,17.64,1.72C459.86,320.13,454.49,318.14,451.52,316.08Zm-7-17.17a10.24,10.24,0,0,1,4,4.94c.29,1.21,1.44,2.92,3.29,2,2.43-1.21,7.88-7,5.22-14.41-2.33-6.52-13.44-8.49-17.64-1.72C436.14,294.87,441.51,296.87,444.48,298.92Zm21.3-.08c-5.15-3.19-7.14,2.17-9.2,5.15a10.24,10.24,0,0,1-4.94,4c-1.21.29-2.92,1.44-2,3.29,1.22,2.43,7,7.88,14.41,5.22C470.58,314.14,472.55,303,465.78,298.84ZM444.36,307c1.21-.29,2.92-1.44,2-3.29-1.22-2.43-7-7.88-14.41-5.21-6.52,2.33-8.49,13.44-1.72,17.64,5.15,3.19,7.14-2.17,9.2-5.15A10.24,10.24,0,0,1,444.36,307Zm5.45.46a1.81,1.81,0,1,1-1.81-1.81A1.81,1.81,0,0,1,449.81,307.5Z"
                                      transform="matrix(1, 0, 0, 1, -423, -283)" />
                            </svg>
                        </g>
                    </svg>
                </button>
            </section>
        </Authorized>
    </AuthorizeView>

    <p>
        @evState.Name @ChargingState<br />
        It is @evState.TemperatureInCar°C in the car
    </p>

    <svg viewBox="10 309 980 383">
        <path fill="hsla(30, 100%, 60%, 0.5)" d="M933.9,406.9v-98.7H10v383.7h923.9v-95.4H990V406.9H933.9z M948.5,562.6h-61.7V647H56.6V355.3h830.2V437v4.5h61.7V562.6z" />
        <svg x="@(56 + 30)" y="@(355 + 30)" width="@(831 - 2 * 30)" height="@(293 - 2 * 30)">
            <rect fill="hsla(30, 100%, 60%, 0.25)" width="100%" height="100%" />
            <rect fill="@BatteryColor" width="@evState.BatteryLevel%" height="100%" />
            <text font-family="segoe ui" fill="white" style="font-size: 150px !important" font-weight="400" x="50%" y="@(20 + (293 - 2 * 30) / 2)" dominant-baseline="middle" text-anchor="middle">@Math.Round(evState.EstimatedBatteryRange)km</text>
        </svg>
    </svg>
}
else
{
    <Conesoft.Users.UserForm />
}

<footer>
    <a @onclick="ToggleUserForm">&#9776;</a>
</footer>

@functions {
    public void Dispose()
    {
        clients.Remove(this);
        var _ = NotifyClients();
    }

    public string BatteryColor
    {
        get
        {
            if (evState.BatteryLevel < 10) return "red";
            if (evState.BatteryLevel < 20) return "orange";
            return "green";
        }
    }

    public string ChargingState
    {
        get
        {
            if (evState.ChargingState == "Complete") return "is fully charged";
            if (evState.ChargingState == "Stopped") return "is done charging";
            if (evState.ChargingState == "NoPower") return "is plugged in, not charging";
            return evState.ChargingState != null ? "is " + evState.ChargingState.ToLowerInvariant() : "";
        }
    }
}

@code {
    static bool clickingCharging = false;
    static bool charging = false;
    static bool clickingClimateControl = false;
    static bool climateControl = false;
    static bool showUserForm = false;
    static List<Index> clients = new List<Index>();

    protected override async Task OnInitializedAsync()
    {
        evState.OnChanged += NotifyClients;

        if (clients.Contains(this) == false)
        {
            clients.Add(this);
        }
        charging = (await eCarUpHttpClient.State()).Length > 0;
        climateControl = evState.ClimateControlActive;
        await base.OnInitializedAsync();
        await NotifyClients();
    }

    async Task NotifyClients()
    {
        climateControl = evState.ClimateControlActive;
        await Task.WhenAll(clients.Select(async client => await client.InvokeAsync(() => client.StateHasChanged())));
    }

    void ToggleUserForm()
    {
        showUserForm = !showUserForm;
    }

    async Task ToggleCharging()
    {
        clickingCharging = true;
        await NotifyClients();
        if (charging == false)
        {
            await eCarUpHttpClient.StartCharging(TimeSpan.FromHours(4));
        }
        else
        {
            await eCarUpHttpClient.StopCharging();
        }
        charging = (await eCarUpHttpClient.State()).Length > 0;
        clickingCharging = false;
        await NotifyClients();
    }

    async Task ToggleClimateControl()
    {
        clickingClimateControl = true;
        await NotifyClients();
        await pollEvState.ToggleClimateControl(climateControl == false);

        climateControl = !climateControl;
        clickingClimateControl = false;
        await NotifyClients();
    }
}