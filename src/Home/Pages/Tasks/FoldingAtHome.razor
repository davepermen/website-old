@page "/foldingathome"

@inject IDataSources dataSources

<tile-group>
    <h1>folding@home</h1>
    <tile size="wide" class="split" title="server stats">
        <b>@workUnits</b>
        <b>@score.ToString("###,###,###,###,##0")</b>
        <i>work units</i>
        <i>score</i>
    </tile>
    <tile size="normal">
        <p><a target="_blank" href="https://stats.foldingathome.org/donor/davepermen">davepermen</a></p>
        <i>my profile</i>
        <br />
        <p><a target="_blank" href="https://stats.foldingathome.org/team/223518">LinusTechTips</a></p>
        <i>my team</i>
    </tile>
    @if (slots.Count() == 2)
    {
        <tile size="wide" class="split" title="client status">
            @foreach (var slot in slots)
            {
                <b>@slot.PercentDone</b>
            }
            @foreach (var slot in slots)
            {
                <p>@slot.Description.Split(":").First().ToUpperInvariant()</p>
            }
            @foreach (var slot in slots)
            {
                <i>@slot.Eta</i>
            }
        </tile>
    }
    else if (singleSlot != null)
    {
        <tile size="wide" title="client status">
            <b>@singleSlot.PercentDone</b>
            <p>@singleSlot.Description.Split(":").First().ToUpperInvariant()</p>
            <i>@singleSlot.Eta remaining</i>
        </tile>
    }
    else
    {
        <tile size="wide" title="client status" style="opacity: 0.7">
            <b>no active task</b>
            <i>waiting for next WU</i>
        </tile>
    }
</tile-group>

@code
{
    Data.FoldingAtHome.Client.Slot[] slots = Array.Empty<Data.FoldingAtHome.Client.Slot>();
    Data.FoldingAtHome.Client.Slot? singleSlot => slots.FirstOrDefault();
    int workUnits;
    int score;

    protected override async Task OnInitializedAsync()
    {
        var _ = LoopAsync();
        await base.OnInitializedAsync();
    }

    async Task ReadServerStats()
    {
        var file = dataSources.Local / "FromSources" / "Folding@Home" / File.Name("ServerStats", "txt");
        var lines = await file.ReadLinesAsync();
        workUnits = int.Parse(lines.First());
        score = int.Parse(lines.Last());
    }

    async Task ReadClientStatus()
    {
        var file = dataSources.Local / "FromSources" / "Folding@Home" / File.Name("ClientStatus", "txt");
        slots = await file.ReadFromJsonAsync<Data.FoldingAtHome.Client.Slot[]>();
    }

    async Task LoopAsync()
    {
        while (true)
        {
            await ReadServerStats();
            await ReadClientStatus();

            await Task.Delay(1000);
            StateHasChanged();
        }
    }
}