@page "/foldingathome"
@using Conesoft.DataSources
@using IO = System.IO

@inject IDataSources dataSources

<tile-group>
    <h1>folding@home</h1>
    <tile size="wide" class="split" title="server stats">
        <b>@workUnits</b>
        <b>@score.ToString("###,###,###,###,##0")</b>
        <i>work units</i>
        <i>score</i>
    </tile>
    <tile size="normal">
        <p><a target="_blank" href="https://stats.foldingathome.org/donor/davepermen">davepermen</a></p>
        <i>my profile</i>
        <br />
        <p><a target="_blank" href="https://stats.foldingathome.org/team/223518">LinusTechTips</a></p>
        <i>my team</i>
    </tile>
    @if (string.IsNullOrWhiteSpace(percentDone) == false)
    {
        <tile size="wide" title="client status">
            <b>@percentDone</b>
            <i>@eta remaining</i>
        </tile>
    }
    else
    {
        <tile size="wide" title="client status" style="opacity: 0.7">
            <b>no active task</b>
            <i>waiting for next WU</i>
        </tile>
    }
</tile-group>

@code
{
    int workUnits = 0;
    int score = 0;

    string percentDone = "";
    string eta = "";

    protected override async Task OnInitializedAsync()
    {
        var _ = LoopAsync();
        await base.OnInitializedAsync();
    }

    async Task ReadServerStats()
    {
        var lines = await IO.File.ReadAllLinesAsync(IO.Path.Combine(dataSources.LocalDirectory, "FromSources", "Folding@Home", "ServerStats.txt"));
        workUnits = int.Parse(lines.First());
        score = int.Parse(lines.Last());
    }

    async Task ReadClientStatus()
    {
        var lines = await IO.File.ReadAllLinesAsync(IO.Path.Combine(dataSources.LocalDirectory, "FromSources", "Folding@Home", "ClientStatus.txt"));
        percentDone = lines.First();
        eta = lines.Last();
    }

    async Task LoopAsync()
    {
        while (true)
        {
            await ReadServerStats();
            await ReadClientStatus();

            await Task.Delay(1000);
            StateHasChanged();
        }
    }
}