@page "/code"

@inject IDataSources dataSources

<tile-group>
    <h1>code</h1>
    <tile size="big" class="split wideleft" title="personal projects">
        @foreach (var repository in personalRepositories.Take(10))
        {
            <a href="@repository.HtmlUrl" target="_blank">
                @repository.Name
            </a>
            <i>@repository.UpdatedAt.Humanize().Replace(" ago", "")</i>
        }
    </tile>
    <tile size="normal" type="clickable" style="background: black" title="/davepermen">
        <a href="https://github.com/davepermen" target="_blank">
            <img src="/logos/github.webp" />
        </a>
    </tile>
    <tile size="wide" class="split wideleft" title="conesoft projects">
        @foreach (var repository in conesoftRepositories.Take(4))
        {
            <a href="@repository.HtmlUrl" target="_blank">
                @repository.Name
            </a>
            <i>@repository.UpdatedAt.Humanize().Replace(" ago", "")</i>
        }
    </tile>
    <tile size="normal" type="clickable" style="background: black" title="/conesoft">
        <a href="https://github.com/conesoft" target="_blank">
            <img src="/logos/github.webp" />
        </a>
    </tile>
</tile-group>

<style>
    tile * {
        overflow: hidden;
        text-overflow: ellipsis;
    }

    tile.wideleft {
        grid-template-columns: 2fr 1fr;
        padding: 0 0.25rem;
    }

        tile.wideleft a {
            text-align: left;
        }

        tile.wideleft i {
            font-size: 1rem;
            text-align: right;
        }
</style>

@functions
{
    async Task<Data.GitHub.Repository[]> GetRepositories(string organisationOrUsername)
    {
        var file = dataSources.Local / "FromSources" / "Github Repositories" / File.Name(organisationOrUsername, "json");
        if (file.Exists)
        {
            return await file.ReadFromJson<Data.GitHub.Repository[]>(new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase });
        }
        return Array.Empty<Data.GitHub.Repository>();
    }
}

@code
{
    Data.GitHub.Repository[] personalRepositories = Array.Empty<Data.GitHub.Repository>();
    Data.GitHub.Repository[] conesoftRepositories = Array.Empty<Data.GitHub.Repository>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        this.personalRepositories = await GetRepositories("davepermen");
        this.conesoftRepositories = await GetRepositories("conesoft");
    }
}