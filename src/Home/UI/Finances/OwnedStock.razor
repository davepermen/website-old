@using Microsoft.Extensions.Configuration
@using System.Net.Http

@inject IConfiguration Configuration
@inject IHttpClientFactory factory

<AuthorizeView>
    <Authorized>
        <tile size="wide" title="stock balance" style="font-size: 1.2rem">
            @if (Total != 0)
            {
                <i>@($"{Total:0.00}") CHF</i>
                <b>@($"{Gain:0.00}") CHF</b>
            }
        </tile>
    </Authorized>
</AuthorizeView>

<style>
    tile {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }
</style>

@functions {
    (decimal total, decimal gain) CalculateStockGains(int amount, decimal pricePerStock, decimal currentPrice)
    {
        var total = amount * currentPrice;
        var gain = total - amount * pricePerStock;

        return (total, gain);
    }

    decimal Convert(decimal value, decimal exchangeRate, decimal exchangeCost)
    {
        return value * (exchangeRate / (1 + exchangeCost));
    }
}

@code {
    public async Task<decimal> GetCurrentTeslaStock(HttpClient client, string apikey)
    {
        var response = await client.GetFromJsonAsync<Data.AlphaVantage.Response>($"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=TSLA&apikey={apikey}");

        return decimal.TryParse(response.GlobalQuote.Price, out decimal value) ? value : 0;
    }

    public async Task<decimal> GetExchangeRatesUSDtoCHF(HttpClient client)
    {
        var response = await client.GetFromJsonAsync<Data.ExchangeRates.Response>("https://api.exchangeratesapi.io/latest?base=USD&symbols=CHF");

        return (decimal)response.Rates.CHF;
    }

    [Parameter]
    public decimal OriginalPrice { get; set; }
    [Parameter]
    public int Amount { get; set; }
    [Parameter]
    public decimal ExchangeCostInPercent { get; set; }

    decimal Total { get; set; }
    decimal Gain { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Compute(factory.CreateClient("ownedstock"));
    }

    async Task Compute(HttpClient client)
    {
        var originalPrice = OriginalPrice;
        var currentPrice = await GetCurrentTeslaStock(client, Configuration["alphavantage_apikey"]);
        var amount = Amount;

        var exchangeRate = await GetExchangeRatesUSDtoCHF(client);
        var exchangeCost = ExchangeCostInPercent / 100;

        var result = CalculateStockGains(amount, originalPrice, currentPrice);

        Total = Convert(result.total, exchangeRate, exchangeCost);
        Gain = Convert(result.gain, exchangeRate, exchangeCost);
    }
}